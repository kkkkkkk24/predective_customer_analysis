# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A8W89ksmMMTVBzfTkgUbXQLgW7pgmLCV
"""

import pandas as pd
import numpy as np

# Set seed for reproducibility
np.random.seed(42)

# Generate synthetic data
n = 500

data = {
    "CustomerID": np.arange(1000, 1000 + n),
    "Age": np.random.randint(18, 70, size=n),
    "Gender": np.random.choice(["Male", "Female"], size=n),
    "AnnualIncome": np.random.randint(15, 150, size=n),
    "SpendingScore": np.random.randint(1, 100, size=n)
}

df = pd.DataFrame(data)

# Generate a synthetic binary target: Purchase Likelihood
df["PurchaseLikelihood"] = ((df["SpendingScore"] > 50) & (df["AnnualIncome"] > 50)).astype(int)

import os

# Create the directory if it doesn't exist
if not os.path.exists("data"):
    os.makedirs("data")

# Save to CSV
df.to_csv("data/sample_customer_data.csv", index=False)
print("✅ Synthetic dataset saved at data/sample_customer_data.csv")

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import joblib

# Load data from the locally generated CSV
df = pd.read_csv("data/sample_customer_data.csv")

# Select and rename columns to match the original code's intended structure
# Assuming the synthetic data has similar column names or structure
# Based on the generated data structure, I'll select the relevant columns
df = df[["Age", "Gender", "AnnualIncome", "SpendingScore", "PurchaseLikelihood"]]
# The column names in the synthetic data already match the desired names, so no renaming is needed here.
# df = df.rename(columns={"Annual Income ($)": "AnnualIncome", "Spending Score (1-100)": "SpendingScore"})

df = df.dropna().copy() # Keep this step in case of any missing values in synthetic data

# The target variable 'PurchaseLikelihood' is already present in the synthetic data.
# If you were using the external data, you might need to create it as originally intended.
# df["PurchaseLikelihood"] = ((df["SpendingScore"] > 50) & (df["AnnualIncome"] > 50)).astype(int)

df["PurchaseLikelihood"] = ((df["SpendingScore"] > 50) & (df["AnnualIncome"] > 50)).astype(int)

# Encode gender
df["Gender"] = LabelEncoder().fit_transform(df["Gender"])

# Train model
X = df[["Age", "Gender", "AnnualIncome", "SpendingScore"]]
y = df["PurchaseLikelihood"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)

#Save model
joblib.dump(model, "customer_model.pkl")
print("✅ Model saved as customer_model.pkl")

